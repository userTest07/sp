
-------------------------------------------Assignment-3-----------------------------------------------

FCFS:-

import java.util.*;
 
public class FCFS {
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("enter no of process: ");
		int n = sc.nextInt();
		int pid[] = new int[n];   // process ids
		int ar[] = new int[n];     // arrival times
		int bt[] = new int[n];     // burst or execution times
		int ct[] = new int[n];     // completion times
		int ta[] = new int[n];     // turn around times
		int wt[] = new int[n];     // waiting times 
		int temp;
		float avgwt=0,avgta=0;
 
		for(int i = 0; i < n; i++)
		{
			System.out.println("enter process " + (i+1) + " arrival time: ");
			ar[i] = sc.nextInt();
			System.out.println("enter process " + (i+1) + " brust time: ");
			bt[i] = sc.nextInt();
			pid[i] = i+1;
		}
 
		//sorting according to arrival times
		for(int i = 0 ; i <n; i++)
		{
			for(int  j=0;  j < n-(i+1) ; j++)
			{
				if( ar[j] > ar[j+1] )
				{
					temp = ar[j];
					ar[j] = ar[j+1];
					ar[j+1] = temp;
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					temp = pid[j];
					pid[j] = pid[j+1];
					pid[j+1] = temp;
				}
			}
		}
		
		// finding completion times
		for(int  i = 0 ; i < n; i++)
		{
			if( i == 0)
			{	
				ct[i] = ar[i] + bt[i];
			}
			else
			{
				if( ar[i] > ct[i-1])
				{
					ct[i] = ar[i] + bt[i];
				}
				else
					ct[i] = ct[i-1] + bt[i];
			}
			ta[i] = ct[i] - ar[i] ;          // turnaround time= completion time- arrival time
			wt[i] = ta[i] - bt[i] ;          // waiting time= turnaround time- burst time
			avgwt += wt[i] ;               // total waiting time
			avgta += ta[i] ;               // total turnaround time
		}
		
		System.out.println("\npid  arrival  brust  complete turn waiting");
		for(int  i = 0 ; i< n;  i++)
		{
			System.out.println(pid[i] + "  \t " + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t"  + wt[i] ) ;
		}
		sc.close();
		System.out.println("\naverage waiting time: "+ (avgwt/n));     // printing average waiting time.
		System.out.println("average turnaround time:"+(avgta/n));    // printing average turnaround time.
	}
}


Output:-

darkknight@aman-sayyad:~/Desktop/Practical 3$ javac FCFS.java
darkknight@aman-sayyad:~/Desktop/Practical 3$ java FCFS
enter no of process: 
4
enter process 1 arrival time: 
4
enter process 1 brust time: 
3
enter process 2 arrival time: 
5
enter process 2 brust time: 
2
enter process 3 arrival time: 
6
enter process 3 brust time: 
3
enter process 4 arrival time: 
6
enter process 4 brust time: 
2

pid  arrival  brust  complete turn waiting
1  	 4	3	7	3	0
2  	 5	2	9	4	2
3  	 6	3	12	6	3
4  	 6	2	14	8	6

average waiting time: 2.75
average turnaround time:5.25


Priority:-

import java.util.Scanner;
 
public class priority {
        
    public static void main(String args[]) {
            Scanner s = new Scanner(System.in);
 
            int x,n,p[],pp[],bt[],w[],t[],awt,atat,i;
 
            p = new int[10];
            pp = new int[10];
            bt = new int[10];
            w = new int[10];
            t = new int[10];
 
   //n is number of process
   //p is process
   //pp is process priority
   //bt is process burst time
   //w is wait time
   // t is turnaround time
   //awt is average waiting time
   //atat is average turnaround time
 
 
   System.out.print("Enter the number of process : ");
   n = s.nextInt();
    System.out.print("\n\t Enter burst time : time priorities \n");
 
   for(i=0;i<n;i++)
    {
       System.out.print("\nProcess["+(i+1)+"]:");
      bt[i] = s.nextInt();
      pp[i] = s.nextInt();
      p[i]=i+1;
    }
 
//sorting on the basis of priority
  for(i=0;i<n-1;i++)
   {
     for(int j=i+1;j<n;j++)
     {
       if(pp[i]<pp[j])
       {
     x=pp[i];
     pp[i]=pp[j];
     pp[j]=x;
     x=bt[i];
     bt[i]=bt[j];
     bt[j]=x;
     x=p[i];
     p[i]=p[j];
     p[j]=x;
      }
   }
}
w[0]=0;
awt=0;
t[0]=bt[0];
atat=t[0];
for(i=1;i<n;i++)
 {
   w[i]=t[i-1];
   awt+=w[i];
   t[i]=w[i]+bt[i];
   atat+=t[i];
 }
 
//Displaying the process
 
  System.out.print("\n\nProcess \t Burst Time \t Wait Time \t Turn Around Time   Priority \n");
for(i=0;i<n;i++)
  System.out.print("\n   "+p[i]+"\t\t   "+bt[i]+"\t\t     "+w[i]+"\t\t     "+t[i]+"\t\t     "+pp[i]+"\n");
awt/=n;
atat/=n;
  System.out.print("\n Average Wait Time : "+awt);
  System.out.print("\n Average Turn Around Time : "+atat);
 
        }
}

Output:-

darkknight@aman-sayyad:~/Desktop/Practical 3$ javac priority.java
darkknight@aman-sayyad:~/Desktop/Practical 3$ java priority
Enter the number of process : 4

	 Enter burst time : time priorities 

Process[1]:23
3

Process[2]:5
2

Process[3]:6
4

Process[4]:5
2


Process 	 Burst Time 	 Wait Time 	 Turn Around Time   Priority 

   3		   6		     0		     6		     4

   1		   23		     6		     29		     3

   2		   5		     29		     34		     2

   4		   5		     34		     39		     2

 Average Wait Time : 17
 Average Turn Around Time : 27
 
 
 SJF:-
 
 import java.util.*;
 
public class SJF {
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println ("enter no of process:");
		int n = sc.nextInt();
		int pid[] = new int[n];
		int at[] = new int[n]; // at means arrival time
		int bt[] = new int[n]; // bt means burst time
		int ct[] = new int[n]; // ct means complete time
		int ta[] = new int[n]; // ta means turn around time
		int wt[] = new int[n];  //wt means waiting time
		int f[] = new int[n];  // f means it is flag it checks process is completed or not
		int st=0, tot=0;
		float avgwt=0, avgta=0;
 
		for(int i=0;i<n;i++)
		{
			System.out.println ("enter process " + (i+1) + " arrival time:");
			at[i] = sc.nextInt();
			System.out.println ("enter process " + (i+1) + " brust time:");
			bt[i] = sc.nextInt();
			pid[i] = i+1;
			f[i] = 0;
		}
		
		boolean a = true;
		while(true)
		{
			int c=n, min=999;
			if (tot == n) // total no of process = completed process loop will be terminated
				break;
			
			for (int i=0; i<n; i++)
			{
				/*
				 * If i'th process arrival time <= system time and its flag=0 and burst<min 
				 * That process will be executed first 
				 */ 
				if ((at[i] <= st) && (f[i] == 0) && (bt[i]<min))
				{
					min=bt[i];
					c=i;
				}
			}
			
			/* If c==n means c value can not updated because no process arrival time< system time so we increase the system time */
			if (c==n) 
				st++;
			else
			{
				ct[c]=st+bt[c];
				st+=bt[c];
				ta[c]=ct[c]-at[c];
				wt[c]=ta[c]-bt[c];
				f[c]=1;
				tot++;
			}
		}
		
		System.out.println("\npid  arrival brust  complete turn waiting");
		for(int i=0;i<n;i++)
		{
			avgwt+= wt[i];
			avgta+= ta[i];
			System.out.println(pid[i]+"\t"+at[i]+"\t"+bt[i]+"\t"+ct[i]+"\t"+ta[i]+"\t"+wt[i]);
		}
		System.out.println ("\naverage tat is "+ (float)(avgta/n));
		System.out.println ("average wt is "+ (float)(avgwt/n));
		sc.close();
	}
}


Output:-

darkknight@aman-sayyad:~/Desktop/Practical 3$ javac SJF.java
darkknight@aman-sayyad:~/Desktop/Practical 3$ java SJF
enter no of process:
4
enter process 1 arrival time:
5
enter process 1 brust time:
3
enter process 2 arrival time:
6
enter process 2 brust time:
2
enter process 3 arrival time:
4
enter process 3 brust time:
3
enter process 4 arrival time:
7
enter process 4 brust time:
2

pid  arrival brust  complete turn waiting
1	5	3	14	9	6
2	6	2	9	3	1
3	4	3	7	3	0
4	7	2	11	4	2

average tat is 4.75
average wt is 2.25


Round Robin:-

import java.io.*;

class RR {
    public static void main(String args[]) throws IOException {
        // Use BufferedReader to read input from the console
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int i, j, k, q, sum = 0;

        System.out.println("Enter number of process:");
        int n = Integer.parseInt(in.readLine());
        
        int bt[] = new int[n];
        int wt[] = new int[n];
        int tat[] = new int[n];
        int a[] = new int[n];

        System.out.println("Enter burst Time:");
        for (i = 0; i < n; i++) {
            System.out.println("Enter burst Time for " + (i + 1));
            bt[i] = Integer.parseInt(in.readLine());
        }

        System.out.println("Enter Time quantum:");
        q = Integer.parseInt(in.readLine());

        for (i = 0; i < n; i++) {
            a[i] = bt[i];
        }
        
        for (i = 0; i < n; i++) {
            wt[i] = 0;
        }
        
        do {
            for (i = 0; i < n; i++) {
                if (bt[i] > q) {
                    bt[i] -= q;
                    for (j = 0; j < n; j++) {
                        if ((j != i) && (bt[j] != 0)) {
                            wt[j] += q;
                        }
                    }
                } else {
                    for (j = 0; j < n; j++) {
                        if ((j != i) && (bt[j] != 0)) {
                            wt[j] += bt[i];
                        }
                    }
                    bt[i] = 0;
                }
            }
            sum = 0;
            for (k = 0; k < n; k++) {
                sum += bt[k];
            }
        } while (sum != 0);

        for (i = 0; i < n; i++) {
            tat[i] = wt[i] + a[i];
        }

        System.out.println("process\t\tBT\tWT\tTAT");
        for (i = 0; i < n; i++) {
            System.out.println("process" + (i + 1) + "\t" + a[i] + "\t" + wt[i] + "\t" + tat[i]);
        }

        float avg_wt = 0;
        float avg_tat = 0;
        for (j = 0; j < n; j++) {
            avg_wt += wt[j];
        }
        for (j = 0; j < n; j++) {
            avg_tat += tat[j];
        }

        System.out.println("Average waiting time " + (avg_wt / n));
        System.out.println("Average turn around time " + (avg_tat / n));
    }
}

Output:-

darkknight@aman-sayyad:~/Desktop/Practical 3$ javac RR.java
darkknight@aman-sayyad:~/Desktop/Practical 3$ java RR
Enter number of process:
4
Enter brust Time:
Enter brust Time for 1
5
Enter brust Time for 2
6
Enter brust Time for 3
4
Enter brust Time for 4
3
Enter Time quantum:
4
process		BT	WT	TAT
process1	5	11	16
process2	6	12	18
process3	4	8	12
process4	3	12	15
average waiting time 10.75
 Average turn around time15.25

