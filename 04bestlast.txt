
-------------------------------------------Assignment-4----------------------------------

Best Fit:-

  
public class Best
{
    
    static void bestFit(int blockSize[], int m, int processSize[], 
                                                     int n)
    {
     
        int allocation[] = new int[n];
       
     
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
       
     
        for (int i=0; i<n; i++)
        {
            
            int bestIdx = -1;
            for (int j=0; j<m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    if (bestIdx == -1)
                        bestIdx = j;
                    else if (blockSize[bestIdx] > blockSize[j])
                        bestIdx = j;
                }
            }
       
            
            if (bestIdx != -1)
            {
                
                allocation[i] = bestIdx;
       
                
                blockSize[bestIdx] -= processSize[i];
            }
        }
       
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print("   " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
      
    
    public static void main(String[] args)
    {
         int blockSize[] = {100, 500, 200, 300, 600};
         int processSize[] = {212, 417, 112, 426};
         int m = blockSize.length;
         int n = processSize.length;
           
         bestFit(blockSize, m, processSize, n);
    }
}


Output:-

darkknight@aman-sayyad:~/Desktop/Practical 4$ javac Best.java
darkknight@aman-sayyad:~/Desktop/Practical 4$ java Best

Process No.	Process Size	Block no.
   1		212		4
   2		417		2
   3		112		3
   4		426		5


First Fit:-


class First
{
    
    static void firstFit(int blockSize[], int m,
                         int processSize[], int n)
    {
        
        int allocation[] = new int[n];
     
     
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
     
        
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    
                    allocation[i] = j;
     
                    
                    blockSize[j] -= processSize[i];
     
                    break;
                }
            }
        }
     
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print(" " + (i+1) + "\t\t" +
                             processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
     
    
    public static void main(String[] args)
    {
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;
         
        firstFit(blockSize, m, processSize, n);
    }
}

Output:-

darkknight@aman-sayyad:~/Desktop/Practical 4$ javac First.java
darkknight@aman-sayyad:~/Desktop/Practical 4$ java First

Process No.	Process Size	Block no.
 1		212		2
 2		417		5
 3		112		2
 4		426		Not Allocated


Next Fit:-



import java.util.Arrays;
 
public class Next {
 

    static void NextFit(int blockSize[], int m, int processSize[], int n) {
        
        int allocation[] = new int[n], j = 0;
 
        
        Arrays.fill(allocation, -1);
 
        
        for (int i = 0; i < n; i++) {
 
            
            int count =0;
            while (j < m) {
                count++;    
                if (blockSize[j] >= processSize[i]) {
 
                    
                    allocation[i] = j;
 
                    blockSize[j] -= processSize[i];
 
                    break;
                }
 
                
                j = (j + 1) % m;
            }
        }
 
        System.out.print("\nProcess No.\tProcess Size\tBlock no.\n");
        for (int i = 0; i < n; i++) {
            System.out.print( i + 1 + "\t\t" + processSize[i]
                    + "\t\t");
            if (allocation[i] != -1) {
                System.out.print(allocation[i] + 1);
            } else {
                System.out.print("Not Allocated");
            }
            System.out.println("");
        }
    }
 

    static public void main(String[] args) {
        int blockSize[] = {5, 10, 20};
        int processSize[] = {10, 20, 5};
        int m = blockSize.length;
        int n = processSize.length;
        NextFit(blockSize, m, processSize, n);
    }
}


Output:-

darkknight@aman-sayyad:~/Desktop/Practical 4$ javac Next.java
darkknight@aman-sayyad:~/Desktop/Practical 4$ java Next

Process No.	Process Size	Block no.
1		10		2
2		20		3
3		5		1


Worst Fit:-


  
public class Worst 
{
    
    static void worstFit(int blockSize[], int m, int processSize[], 
                                                     int n)
    {
        
        int allocation[] = new int[n];
       
       
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
       
       
        
        for (int i=0; i<n; i++)
        {
            
            int wstIdx = -1;
            for (int j=0; j<m; j++)
            {
                if (blockSize[j] >= processSize[i])
                {
                    if (wstIdx == -1)
                        wstIdx = j;
                    else if (blockSize[wstIdx] < blockSize[j])
                        wstIdx = j;
                }
            }
       
       
            if (wstIdx != -1)
            {
                
                allocation[i] = wstIdx;
       
                
                blockSize[wstIdx] -= processSize[i];
            }
        }
       
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++)
        {
            System.out.print("   " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
      
    
    public static void main(String[] args)
    {
         int blockSize[] = {100, 500, 200, 300, 600};
         int processSize[] = {212, 417, 112, 426};
         int m = blockSize.length;
         int n = processSize.length;
           
         worstFit(blockSize, m, processSize, n);
    }
}

Output:-

darkknight@aman-sayyad:~/Desktop/Practical 4$ javac Worst.java
darkknight@aman-sayyad:~/Desktop/Practical 4$ java Worst

Process No.	Process Size	Block no.
   1		212		5
   2		417		2
   3		112		5
   4		426		Not Allocated

 
